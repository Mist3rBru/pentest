import { assignData, enqueue, exec, getData } from '../utils'
import axios from 'axios'

export function serviceEnum(subdomainList: string[]): Promise<void> {
  return enqueue(
    subdomainList.map(subdomain => async () => {
      try {
        const url = `http://${subdomain}`
        const { status } = await axios.get(url, {
          timeout: 3000
        })
        assignData(subdomain, { isService: status >= 200 && status < 400 })
      } catch (err) {
        assignData(subdomain, { isService: false })
      }
    })
  )
}

export function portEnum(subdomainList: string[]): Promise<void> {
  return enqueue(
    subdomainList.map(subdomain => async () => {
      if (getData(subdomain)?.isService === false) {
        return
      }
      /**
       * -Pn: Treat all hosts as online -- skip host discovery
       * -sV: Probe open ports to determine service/version info
       * -f; --mtu <val>: fragment packets (optionally w/given MTU)
       * -n/-R: Never do DNS resolution/Always resolve [default: sometimes]
       * -T<0-5>: Set timing template (higher is faster)
       * --data-length <num>: Append random data to sent packets
       * -oN/-oX/-oS/-oG <file>: Output scan in normal, XML, s|<rIpt kIddi3,
       */
      const nmapResult = await exec(`nmap -Pn -sV ${subdomain}`)
      const portList = nmapResult
        .split('\n')
        .filter(line => line.includes('open'))
        .map(line => {
          const [portAndProtocol, state, service, version] = line.split(/\s+/g)
          const [port, protocol] = portAndProtocol.split('/')
          return { port: Number(port), protocol, service, version }
        })
      assignData(subdomain, { portList })
    })
  )
}
