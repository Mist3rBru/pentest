import {
  getBinaryEdgeSubdomainList,
  getRdap,
  getSecurityTrailsSubdomainList
} from '../subdomain/apis'
import {
  getAssetFinderSubdomainList,
  getGithubSubdomainList,
  getSubFinderSubdomainList
} from '../subdomain/tools'
import { filterDuplicate, writeFile } from '../utils'

interface InformationGatheringResult {
  [subdomain: string]: Record<string, unknown>
}

export async function informationGathering(
  domain: string
): Promise<InformationGatheringResult> {
  const apiSubdomains = await Promise.all([
    getSecurityTrailsSubdomainList(domain),
    getBinaryEdgeSubdomainList(domain),
    getAssetFinderSubdomainList(domain),
    getSubFinderSubdomainList(domain)
  ])
  const subdomainList = filterDuplicate(apiSubdomains.flat())

  writeFile(`subdomain.${domain}.json`, JSON.stringify(subdomainList))

  const githubSubdomainList = await getGithubSubdomainList(domain)
  const filteredSubdomains = filterDuplicate(
    subdomainList.concat(githubSubdomainList)
  )

  const result: InformationGatheringResult = {}
  for (const subdomain of filteredSubdomains) {
    const data = await getRdap(subdomain)
    if (data) {
      process.stdout.write(JSON.stringify({ subdomain, data }, null, 2) + '\n')
      result[subdomain] = data
    }
  }

  writeFile(`subdomain.data.${domain}.json`, JSON.stringify(result))

  return result
}
