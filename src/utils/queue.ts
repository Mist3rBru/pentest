import { cpus } from 'node:os'

export class Queue {
  private readonly concurrency: number
  private waitingQueue: Promise<void>[]
  private runningJobs: number
  private finishCb: (() => void | Promise<void>) | undefined

  constructor(concurrency: number) {
    this.concurrency = concurrency
    this.waitingQueue = []
    this.runningJobs = 0
  }

  add(promise: Promise<void>): void {
    this.waitingQueue.push(promise)
    this.process()
  }

  addBulk(promiseList: Promise<void>[]): void {
    for (const promise of promiseList) {
      this.add(promise)
    }
  }

  onFinish(cb: () => void | Promise<void>): void {
    this.finishCb = cb
  }

  private async process(): Promise<void> {
    if (this.runningJobs >= this.concurrency) {
      return
    }

    const promise = this.waitingQueue.shift()
    if (!promise) {
      return
    }

    this.runningJobs++
    return promise
      .catch(err => {})
      .finally(() => {
        this.runningJobs--
        if (this.runningJobs > 0 || this.waitingQueue.length > 0) {
          this.process()
        } else {
          this.finishCb?.()
        }
      })
  }
}

export async function enqueue(
  promiseList: Promise<void>[],
  concurrency: number = cpus().length
): Promise<void> {
  return new Promise(resolve => {
    const queue = new Queue(concurrency)
    queue.addBulk(promiseList)
    queue.onFinish(resolve)
  })
}
