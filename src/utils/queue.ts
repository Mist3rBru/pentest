import { cpus } from 'node:os'

class Queue {
  private readonly concurrency: number
  private readonly waitingQueue: (() => Promise<void>)[]
  private runningJobs: number
  private finishCb: (() => void) | undefined

  constructor(concurrency: number) {
    this.concurrency = concurrency
    this.waitingQueue = []
    this.runningJobs = 0
  }

  add(promise: () => Promise<void>): void {
    this.waitingQueue.push(promise)
    this.process()
  }

  addBulk(promiseList: (() => Promise<void>)[]): void {
    for (const promise of promiseList) {
      this.add(promise)
    }
  }

  async onFinish(cb: () => void): Promise<void> {
    this.finishCb = cb
  }

  private async process(): Promise<void> {
    if (this.runningJobs >= this.concurrency) {
      return
    }

    const promise = this.waitingQueue.shift()
    if (!promise) {
      if (!this.runningJobs) {
        this.finishCb?.()
      }
      return
    }

    this.runningJobs++
    return promise()
      .catch(err => {})
      .finally(() => {
        this.runningJobs--
        this.process()
      })
  }
}

export async function enqueue(
  promiseList: (() => Promise<void>)[],
  concurrency: number = cpus().length * 2
): Promise<void> {
  return new Promise(resolve => {
    const queue = new Queue(concurrency)
    queue.addBulk(promiseList)
    queue.onFinish(resolve)
  })
}

export function createQueue(concurrency: number = cpus().length): Queue {
  return new Queue(concurrency)
}
