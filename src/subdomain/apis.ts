import { isDev } from '../utils'
import { resolve4 } from 'node:dns'
import { promisify } from 'node:util'
import axios from 'axios'

const getIp = promisify(resolve4)

export interface RdapResponse {
  handle: string
}

export async function getRdap(subdomain: string) {
  try {
    const ipList = await getIp(subdomain)
    for (const ip of ipList) {
      const { data } = await axios.get<{ handle: string } | ''>(
        `https://rdap.registro.br/ip/${ip}`,
        { validateStatus: () => true }
      )
      if (!data) continue

      return { ip, CIDR: data.handle }
    }
  } catch (err) {}
}

export interface BinaryEdgeResponse {
  query: string
  page: number
  pagesize: number
  total: number
  events: string[]
}

export async function getBinaryEdgeSubdomainList(
  domain: string
): Promise<string[]> {
  if (isDev) return []
  const { data } = await axios.get<BinaryEdgeResponse>(
    `https://api.binaryedge.io/v2/query/domains/subdomain/${domain}`,
    {
      headers: {
        'X-Key': process.env.BINARY_EDGE_TOKEN
      }
    }
  )
  return data.events
}

export interface SecurityTrailsResponse {
  endpoint: string
  meta: { limit_reached: boolean }
  subdomain_count: number
  subdomains: string[]
}

export async function getSecurityTrailsSubdomainList(
  domain: string
): Promise<string[]> {
  if (isDev) return []
  const { data } = await axios.get<SecurityTrailsResponse>(
    `https://api.securitytrails.com/v1/domain/${domain}/subdomains?children_only=false&include_inactive=true`,
    {
      headers: {
        APIKEY: process.env.SECURITY_TRAILS_TOKEN
      }
    }
  )
  return data.subdomains.map(subdomain => `${subdomain}.${domain}`)
}
