import 'dotenv/config'
import axios from 'axios'
import { socket } from './utils'

async function getRdap(domain: string) {
  const { data: subdomainListResponse } = await axios.get<string>(
    'https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/DNS/subdomains-top1million-5000.txt'
  )
  const subdomainList = subdomainListResponse.split('\n')

  for (const subdomain of subdomainList) {
    let ipList: string[]
    try {
      ipList = await socket(`${subdomain}.${domain}`)
    } catch (err) {
      continue
    }
    for (const ip of ipList) {
      const { data } = await axios.get<{ handle: string }>(
        `https://rdap.registro.br/ip/${ip}`,
        {
          validateStatus: () => true
        }
      )
      if (!data) {
        continue
      }
      console.log({
        subdomain: `${subdomain}.${domain}`,
        ip,
        CIDR: data.handle
      })
    }
  }
}

async function getBinaryEdge(domain: string) {
  const { data } = await axios.get<BinaryEdgeResponse>(
    `https://api.binaryedge.io/v2/query/domains/subdomain/${domain}`,
    {
      headers: {
        'X-Key': process.env.BINARY_EDGE_TOKEN
      }
    }
  )
  console.log(data)
}

async function getSecurityTrails(domain: string) {
  const { data } = await axios.get<SecurityTrailsResponse>(
    `https://api.securitytrails.com/v1/domain/${domain}/subdomains?children_only=false&include_inactive=true`,
    {
      headers: {
        Accept: 'application/json',
        APIKEY: process.env.SECURITY_TRAILS_TOKEN
      }
    }
  )
  console.log(data)
}

async function main() {
  const domain = process.argv[2] || 'ftec.com.br'

  await Promise.all([
    getRdap(domain),
    getBinaryEdge(domain),
    getSecurityTrails(domain)
  ])
}

main()
