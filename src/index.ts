import 'dotenv/config'
import axios from 'axios'
import { getIp } from './utils'
import { existsSync, mkdirSync, readFileSync, writeFileSync } from 'fs'
import { resolve } from 'path'

async function getRdap(subdomain: string) {
  try {
    const ipList = await getIp(subdomain)
    for (const ip of ipList) {
      const { data } = await axios.get<{ handle: string } | ''>(
        `https://rdap.registro.br/ip/${ip}`,
        { validateStatus: () => true }
      )
      if (!data) continue

      return { ip, CIDR: data.handle }
    }
  } catch (err) {}
}

async function getGithubSubdomainList(domain: string): Promise<string[]> {
  let subdomainList: string[] = []

  try {
    const { data: subdomainListResponse } = await axios.get<string>(
      'https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/DNS/subdomains-top1million-5000.txt',
      { validateStatus: () => true }
    )
    subdomainList = subdomainListResponse.split('\n')
  } catch (err) {
    subdomainList = readFileSync(resolve(__dirname, 'subdomains.txt'))
      .toString()
      .split('\n')
  }

  return subdomainList.map((subdomain) => `${subdomain}.${domain}`)
}

async function getBinaryEdgeSubdomainList(domain: string): Promise<string[]> {
  const { data } = await axios.get<BinaryEdgeResponse>(
    `https://api.binaryedge.io/v2/query/domains/subdomain/${domain}`,
    {
      headers: {
        'X-Key': process.env.BINARY_EDGE_TOKEN
      }
    }
  )
  return data.events
}

async function getSecurityTrailsSubdomainList(
  domain: string
): Promise<string[]> {
  const { data } = await axios.get<SecurityTrailsResponse>(
    `https://api.securitytrails.com/v1/domain/${domain}/subdomains?children_only=false&include_inactive=true`,
    {
      headers: {
        APIKEY: process.env.SECURITY_TRAILS_TOKEN
      }
    }
  )
  return data.subdomains.map((subdomain) => `${subdomain}.${domain}`)
}

async function main(): Promise<void> {
  const domain = process.argv[2] || 'ftec.com.br'

  const subdomainList = (
    await Promise.all([
      getSecurityTrailsSubdomainList(domain),
      getBinaryEdgeSubdomainList(domain),
      getGithubSubdomainList(domain)
    ])
  )
    .flat()
    .filter((subdomain, i, ar) => ar.indexOf(subdomain) === i)

  const result: Record<string, Record<string, unknown>> = {}
  for (const subdomain of subdomainList) {
    result[subdomain] ??= {}

    const data = await getRdap(subdomain)
    if (data) {
      process.stdout.write(JSON.stringify({ subdomain, data }) + '\n')
      result[subdomain] = data
    }
  }

  const dataFolder = resolve(__dirname, '..', 'data')
  if (!existsSync(dataFolder)) {
    mkdirSync(dataFolder)
  }
  writeFileSync(resolve(dataFolder, 'subdomains.json'), JSON.stringify(result))
}

main()
