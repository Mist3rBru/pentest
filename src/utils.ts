import { exec as execCb } from 'node:child_process'
import { existsSync, mkdirSync, readFileSync, writeFileSync } from 'node:fs'
import { join, resolve } from 'node:path'

export const isDev = process.env.NODE_ENV === 'development'

export const dataFolderPath = resolve(__dirname, '..', 'data')

type DataFileName =
  | 'subdomain.json'
  | 'subdomain.data.json'
  | 'service.json'
  | 'port.json'

export function formatDataFilePath(domain: string, file: DataFileName): string {
  return join(dataFolderPath, domain, file)
}

export function writeFile(
  domain: string,
  file: DataFileName,
  data: string
): void {
  const domainPath = join(dataFolderPath, domain)
  if (!existsSync(domainPath)) {
    mkdirSync(domainPath, { recursive: true })
  }
  writeFileSync(join(dataFolderPath, domain, file), data)
}

export function readFile(
  domain: string,
  file: DataFileName
): Record<string, unknown> {
  return JSON.parse(readFileSync(formatDataFilePath(domain, file)).toString())
}

export function exec(cmd: string): Promise<string> {
  return new Promise((resolve, reject) => {
    execCb(cmd, (error, stdout, stderr) => {
      error ? reject(stderr) : resolve(stdout)
    })
  })
}

export function filterDuplicate(data: string[]): string[] {
  return Array.from(new Set(data))
}

export function verifyData(
  domain: string,
  file: DataFileName | DataFileName[]
): boolean {
  const files = Array.isArray(file) ? file : [file]
  for (const file of files) {
    if (!existsSync(formatDataFilePath(domain, file))) {
      return false
    }
  }
  return true
}
