import { exec as execCb } from 'node:child_process'
import { existsSync, mkdirSync, readFileSync, writeFileSync } from 'node:fs'
import { join, resolve } from 'node:path'

export const isDev = process.env.NODE_ENV === 'development'

export const dataFolderPath = resolve(__dirname, '..', 'data')

type DataFileName =
  | `subdomain.${string}.json`
  | `subdomain.data.${string}.json`
  | `system.${string}.json`

export function formatDataFilePath(file: DataFileName): string {
  return join(dataFolderPath, file)
}

export function writeFile(file: DataFileName, data: string): void {
  if (!existsSync(dataFolderPath)) {
    mkdirSync(dataFolderPath)
  }
  writeFileSync(formatDataFilePath(file), data)
}

export function readFile(file: DataFileName): Record<string, unknown> {
  return JSON.parse(readFileSync(formatDataFilePath(file)).toString())
}

export function exec(cmd: string): Promise<string> {
  return new Promise((resolve, reject) => {
    execCb(cmd, (error, stdout, stderr) => {
      error ? reject(stderr) : resolve(stdout)
    })
  })
}

export function filterDuplicate(data: string[]): string[] {
  return Array.from(new Set(data))
}
